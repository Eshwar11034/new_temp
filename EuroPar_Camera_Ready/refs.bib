@inbook{Scheduling_and_Task_Allocation1,
author = {},
publisher = {John Wiley \& Sons, Ltd},
isbn = {9780471478386},
title = {Scheduling and Task Allocation},
booktitle = {Advanced Computer Architecture and Parallel Processing},
chapter = {10},
pages = {235-265},
doi = {https://doi.org/10.1002/0471478385.ch10},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/0471478385.ch10},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/0471478385.ch10},
year = {2004},
keywords = {task scheduling, task scheduling models, task scheduling using DAGs, communication models, NP-completeness task scheduling, heuristic algorithms for task scheduling, task allocation models, task allocation heuristics, task scheduling in heterogeneous environments},
abstract = {Summary After a computational job is designed and realized as a set of tasks, an optimal assignment of these tasks to the processing elements in a given architecture needs to be determined. This problem is called the scheduling problem and known to be one of the most challenging problems in parallel and distributed computing. The goal of scheduling is to determine an assignment of tasks to processing elements in order to optimize certain performance indexes. Performance and efficiency are two characteristics used to evaluate a scheduling system. We should evaluate a scheduling system based on the quality of the produced task assignment (schedule) and the efficiency of the scheduling algorithm (scheduler). The produced schedule is judged based on the performance criterion to be optimized, while the scheduling algorithm is evaluated based on its time complexity. For example, if we try to optimize the completion time of a program, the less the completion time, the better the schedule will be. Also, if two scheduling algorithms produce task assignments that have the same quality, the less complex algorithm is clearly the better. The scheduling problem in known to be computationally intractable in many cases. Fast optimal algorithms can only be obtained when some restrictions are imposed on the models representing the program and the distributed system. Solving the general problem in a reasonable amount of time requires the use of heuristic algorithms. These heuristics do not guarantee optimal solutions to the problem, but they attempt to find near optimal solutions. This chapter addresses the scheduling problem in many of its variations. We survey a number of solutions to this important problem. We cover program and system models, optimal algorithms, heuristic algorithms, scheduling versus allocation techniques, and homogeneous versus heterogeneous environments.}
}

@inbook{Scheduling_and_Task_Allocation2,
author = {},
publisher = {John Wiley \& Sons, Ltd},
isbn = {9780471478386},
title = {Scheduling and Task Allocation},
booktitle = {Advanced Computer Architecture and Parallel Processing},
chapter = {10},
pages = {237},
doi = {https://doi.org/10.1002/0471478385.ch10},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/0471478385.ch10},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/0471478385.ch10},
year = {2004},
keywords = {task scheduling, task scheduling models, task scheduling using DAGs, communication models, NP-completeness task scheduling, heuristic algorithms for task scheduling, task allocation models, task allocation heuristics, task scheduling in heterogeneous environments},
abstract = {Summary After a computational job is designed and realized as a set of tasks, an optimal assignment of these tasks to the processing elements in a given architecture needs to be determined. This problem is called the scheduling problem and known to be one of the most challenging problems in parallel and distributed computing. The goal of scheduling is to determine an assignment of tasks to processing elements in order to optimize certain performance indexes. Performance and efficiency are two characteristics used to evaluate a scheduling system. We should evaluate a scheduling system based on the quality of the produced task assignment (schedule) and the efficiency of the scheduling algorithm (scheduler). The produced schedule is judged based on the performance criterion to be optimized, while the scheduling algorithm is evaluated based on its time complexity. For example, if we try to optimize the completion time of a program, the less the completion time, the better the schedule will be. Also, if two scheduling algorithms produce task assignments that have the same quality, the less complex algorithm is clearly the better. The scheduling problem in known to be computationally intractable in many cases. Fast optimal algorithms can only be obtained when some restrictions are imposed on the models representing the program and the distributed system. Solving the general problem in a reasonable amount of time requires the use of heuristic algorithms. These heuristics do not guarantee optimal solutions to the problem, but they attempt to find near optimal solutions. This chapter addresses the scheduling problem in many of its variations. We survey a number of solutions to this important problem. We cover program and system models, optimal algorithms, heuristic algorithms, scheduling versus allocation techniques, and homogeneous versus heterogeneous environments.}
}

@inbook{Scheduling_Theory_Algorithms_and_Systems,
author = {Pinedo, Michael},
publisher ={Springer},
year = {2008},
month = {01},
pages = {1-3},
title = {Scheduling: Theory, Algorithms, And Systems}
}

@Inbook{Darte2000,
author="Darte, Alain
and Robert, Yves
and Vivien, Fr{\'e}d{\'e}ric",
title="Scheduling DAGs without Communications",
bookTitle="Scheduling and Automatic Parallelization",
year="2000",
publisher="Birkh{\"a}user Boston",
address="Boston, MA",
pages="3--24",
abstract="This chapter is devoted to a quick overview of elementary results on task graphs scheduling. We start informally with an example in Section 1.2. We introduce basic definitions in Section 1.3. Throughout this chapter, we use a very simple model where communication delays are neglected. When there is no restriction on the number of available resources, optimal scheduling algorithms can be found in polynomial time, as shown in Section 1.4. Section 1.5 deals with limited resources; the scheduling problem becomes NP-complete, and list heuristics are the usual approach.",
isbn="978-1-4612-1362-8",
doi="10.1007/978-1-4612-1362-8_1",
url="https://doi.org/10.1007/978-1-4612-1362-8_1"
}


% SLSQP references
@article{SLSQP,
  author = {Dieter Kraft},
  title = {Algorithm 733: {TOMP}--Fortran modules for optimal control calculations},
  doi = {10.1145/192115.192124},
  year = {1994},
  volume = {20},
  pages = {262--281},
  journal = {{ACM} Transactions on Mathematical Software}
}

@article{zahery2017csolnp,
  title={CSOLNP: Numerical optimization engine for solving non-linearly constrained problems},
  author={Zahery, Mahsa and Maes, Hermine H and Neale, Michael C},
  journal={Twin Research and Human Genetics},
  volume={20},
  number={4},
  pages={290--297},
  year={2017},
  publisher={Cambridge University Press}
}

@article{liu2022survey,
  title={A survey of HPC algorithms and frameworks for large-scale gradient-based nonlinear optimization},
  author={Liu, Felix and Fredriksson, Albin and Markidis, Stefano},
  journal={The Journal of Supercomputing},
  volume={78},
  number={16},
  pages={17513--17542},
  year={2022},
  publisher={Springer}
}

@inproceedings{gill2015performance,
  title={On the performance of SQP methods for nonlinear optimization},
  author={Gill, Philip E and Saunders, Michael A and Wong, Elizabeth},
  booktitle={Modeling and Optimization: Theory and Applications: MOPTA, Bethlehem, PA, USA, August 2014 Selected Contributions},
  pages={95--123},
  year={2015},
  organization={Springer}
}

@misc{NLopt,
  title = {The {NLopt} nonlinear-optimization package},
  author = {Steven G. Johnson},
  year = {2007},
  howpublished = {\url{https://github.com/stevengj/nlopt}}
}

@inbook{cfc5dc07425343f08f3c8ee5ae8f7ddc,
  title = "Numerical optimization",
  author = "Jorge Nocedal and Wright, {Stephen J.}",
  year = "2006",
  language = "English (US)",
  series = "Springer Series in Operations Research and Financial Engineering",
  publisher = "Springer Nature",
  pages = "1--664",
  booktitle = "Springer Series in Operations Research and Financial Engineering",
}

@article{biegler2009large,
  title={Large-scale nonlinear programming using IPOPT: An integrating framework for enterprise-wide dynamic optimization},
  author={Biegler, Lorenz T and Zavala, Victor M},
  journal={Computers \& Chemical Engineering},
  volume={33},
  number={3},
  pages={575--582},
  year={2009},
  publisher={Elsevier}
}

@article{gill2005snopt,
  title={SNOPT: An SQP algorithm for large-scale constrained optimization},
  author={Gill, Philip E and Murray, Walter and Saunders, Michael A},
  journal={SIAM review},
  volume={47},
  number={1},
  pages={99--131},
  year={2005},
  publisher={SIAM}
}

@article{joshy2024pyslsqp,
  title={PySLSQP: A transparent Python package for the SLSQP optimization algorithm modernized with utilities for visualization and post-processing},
  author={Joshy, Anugrah Jo and Hwang, John T},
  journal={arXiv preprint arXiv:2408.13420},
  year={2024}
}

@article{buttari2008parallel,
  title={Parallel tiled QR factorization for multicore architectures},
  author={Buttari, Alfredo and Langou, Julien and Kurzak, Jakub and Dongarra, Jack},
  journal={Concurrency and Computation: Practice and Experience},
  volume={20},
  number={13},
  pages={1573--1590},
  year={2008},
  publisher={Wiley Online Library}
}

@article{baskaran2009compiler,
  title={Compiler-assisted dynamic scheduling for effective parallelization of loop nests on multicore processors},
  author={Baskaran, Muthu Manikandan and Vydyanathan, Nagavijayalakshmi and Bondhugula, Uday Kumar Reddy and Ramanujam, Jagannathan and Rountev, Atanas and Sadayappan, Ponnuswamy},
  journal={ACM sigplan notices},
  volume={44},
  number={4},
  pages={219--228},
  year={2009},
  publisher={ACM New York, NY, USA}
}

@article{dathathri2016compiling,
  title={Compiling affine loop nests for a dynamic scheduling runtime on shared and distributed memory},
  author={Dathathri, Roshan and Mullapudi, Ravi Teja and Bondhugula, Uday},
  journal={ACM Transactions on Parallel Computing (TOPC)},
  volume={3},
  number={2},
  pages={1--28},
  year={2016},
  publisher={ACM New York, NY, USA}
}

@article{householder1958unitary,
  title={Unitary triangularization of a nonsymmetric matrix},
  author={Householder, Alston S},
  journal={Journal of the ACM (JACM)},
  volume={5},
  number={4},
  pages={339--342},
  year={1958},
  publisher={ACM New York, NY, USA}
}

@inproceedings{DAG-scheduling,
author = {McCreary, Carolyn and Khan, A. A. and Thompson, J. J. and McArdle, M. E.},
title = {A Comparison of Heuristics for Scheduling DAGs on Multiprocessors},
year = {1994},
isbn = {0818656026},
publisher = {IEEE Computer Society},
address = {USA},
booktitle = {Proceedings of the 8th International Symposium on Parallel Processing},
pages = {446–451},
numpages = {6}
}

@article{ananthapadmanabhan2023multi,
  title={Multi-field formulations for solving plane problems involving viscoelastic constitutive relations},
  author={Ananthapadmanabhan, S and Saravanan, U},
  journal={Applications in Engineering Science},
  volume={13},
  pages={100120},
  year={2023},
  publisher={Elsevier}
}

@ARTICLE{dynamic-scheduling,
 author={Yu-Kwong Kwok and Ahmad, I.},

  journal={IEEE Transactions on Parallel and Distributed Systems}, 

  title={Dynamic critical-path scheduling: an effective technique for allocating task graphs to multiprocessors}, 

  year={1996},

  volume={7},

  number={5},

  pages={506-521},

  keywords={Dynamic scheduling;Processor scheduling;Scheduling algorithm;Costs;Computational efficiency;Multiprocessing systems;Algorithm design and analysis;Concurrent computing;Hardware;Queueing analysis},

  doi={10.1109/71.503776}}

@software{soumyajit_chatterjee_2025_15602262,
  author       = {Soumyajit Chatterjee and
                  Rahul Utkoor and
                  Uppu Eshwar and
                  Peri, Sathya and
                  Nandivada, V Krishna},
  title        = {Artifact of the paper: Efficient Task Graph
                   Scheduling for Parallel QR Factorization in SLSQP
                  },
  month        = jun,
  year         = 2025,
  publisher    = {Zenodo},
  doi          = {10.5281/zenodo.15602262},
  url          = {https://doi.org/10.5281/zenodo.15602262},
}